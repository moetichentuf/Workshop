{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rotate","keyframes","Rotate","styled","div","breatheAnimation","Circle","Container","Button","button","Input","input","attrs","props","type","size","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+6DAKA,IAAMA,EAASC,YAAH,KASNC,EAASC,IAAOC,IAAV,IAEGJ,GAKTK,EAAmBJ,YAAH,KAMhBK,EAASH,IAAOC,IAAV,IAWOC,GAIbE,EAAYJ,IAAOC,IAAV,KAOTI,EAASL,IAAOM,OAAV,KAgBNC,EAAQP,IAAOQ,MAAMC,OAAM,SAAAC,GAAK,MAAK,CAEzCC,KAAM,WAGNC,KAAMF,EAAME,MAAQ,SALRZ,CAAH,KAeC,SAAAU,GAAK,OAAIA,EAAME,QACd,SAAAF,GAAK,OAAIA,EAAME,QAkBbC,MAhBf,WACE,OACE,6BACE,kBAACd,EAAD,uBACA,kBAACK,EAAD,KACA,sDAEA,kBAACC,EAAD,sBACH,kBAACF,EAAD,OAEG,kBAACI,EAAD,QCjFcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d523b61.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components'\nimport './App.css';\n\n// Create the keyframes\nconst rotate = keyframes`\n  from {\n    transform: scale(0);\n  }\n  to {\n    transform: scale(100%);\n  }\n`;\n// Here we create a component that will rotate everything we pass in over two seconds\nconst Rotate = styled.div`\n  display: inline-block;\n  animation: ${rotate} 4s linear infinite;\n  padding: 2rem 1rem;\n  font-size: 6rem;\n`;\n\nconst breatheAnimation = keyframes`\n 0% { height: 100px; width: 100px; }\n 30% { height: 100px; width: 100px; opacity: 1 }\n 40% { height: 160px; width: 160px; opacity: 1; }\n 100% { height: 100px; width: 100px; opacity: 1; }\n`\nconst Circle = styled.div`\nz-index:-1;\ntop:25%;\nposition:absolute;\n height: 10%;\n width: 10%;\n border-style: solid;\n border-width: 2px;\n border-radius: 50%;\n background-color:blue;\n border-color: blue;\n animation-name: ${breatheAnimation};\n animation-duration: 1s;\n animation-iteration-count: infinite;\n`\nconst Container = styled.div`\n display: flex;\n align-items: center;\n justify-content: center;\n flex-direction: column;\n height: 300px;\n`\nconst Button = styled.button`\n  cursor: pointer;\n  background: transparent;\n  font-size: 16px;\n  border-radius: 3px;\n  color: blue;\n  border: 2px solid blue;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n  transition: 0.5s all ease-out;\n \n  &:hover {\n    background-color: blue;\n    color: white;\n  }\n`;\nconst Input = styled.input.attrs(props => ({\n  // we can define static props\n  type: \"password\",\n\n  // or we can define dynamic ones\n  size: props.size || \"1em\",\n}))`\n  color: blue;\n  font-size: 1em;\n  border: 2px solid blue;\n  border-radius: 3px;\n\n\n\n  /* here we use the dynamically computed prop */\n  margin: ${props => props.size};\n  padding: ${props => props.size};\n`;\nfunction App() {\n  return (\n    <div>\n      <Rotate> ðŸ˜ˆ </Rotate>\n      <Container>\n      <h1>Styled Components Test</h1>\n      \n      <Button>I am a Button</Button>\n   <Circle />\n  </Container>\n      <Input></Input>\n  \n    </div>\n  );\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}